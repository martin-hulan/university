"use strict";(self.webpackChunkuniversity=self.webpackChunkuniversity||[]).push([[4759],{4423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"learn/rossum-formulas/serverless-functions","title":"Rossum Formulas: Serverless functions","description":"Examples of common or interesting serverless functions (using TxScript flavor).","source":"@site/docs/learn/rossum-formulas/serverless-functions.md","sourceDirName":"learn/rossum-formulas","slug":"/learn/rossum-formulas/serverless-functions","permalink":"/docs/learn/rossum-formulas/serverless-functions","draft":false,"unlisted":false,"editUrl":"https://github.com/rossumai/university/tree/master/docs/learn/rossum-formulas/serverless-functions.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Serverless functions","title":"Rossum Formulas: Serverless functions"},"sidebar":"learnSidebar","previous":{"title":"Formula fields","permalink":"/docs/learn/rossum-formulas/formula-fields"},"next":{"title":"Sandboxes","permalink":"/docs/learn/sandboxes/"}}');var o=n(4848),r=n(8453);const s={sidebar_position:2,sidebar_label:"Serverless functions",title:"Rossum Formulas: Serverless functions"},i="Serverless functions",d={},l=[{value:"Automatic adjustments to the issue date format",id:"automatic-adjustments-to-the-issue-date-format",level:2},{value:"Copy fields conditionally",id:"copy-fields-conditionally",level:2},{value:"Get annotation information",id:"get-annotation-information",level:2},{value:"Get document information",id:"get-document-information",level:2},{value:"Validate header fields",id:"validate-header-fields",level:2},{value:"Validate line items",id:"validate-line-items",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"serverless-functions",children:"Serverless functions"})}),"\n",(0,o.jsx)(t.p,{children:"Examples of common or interesting serverless functions (using TxScript flavor)."}),"\n",(0,o.jsx)(t.h2,{id:"automatic-adjustments-to-the-issue-date-format",children:"Automatic adjustments to the issue date format"}),"\n",(0,o.jsxs)(t.p,{children:["It can sometimes happen that invoices have dates in format ",(0,o.jsx)(t.code,{children:"M/D/YYYY"}),' format. But because the queue is in the UK region (for example), Rossum sometimes understands the dates incorrectly (5/1/2024 on the invoice is incorrectly read as "Jan 5th" instead of the correct "May 1st"). There is simply no way for Rossum AI to know what the correct date should be (especially when the queue region suggests something else).']}),"\n",(0,o.jsx)(t.p,{children:"This can be additionally corrected using the following simple code (if we know for what specific vendor this should be done):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"from datetime import datetime\nfrom txscript import TxScript, is_empty\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    relevant_entities = [\n        \"123456\"  # Vendor ABC\n    ]\n\n    t.field.date_issue_normalized = flip_day_month(t.field.date_issue) if t.field.ns_entity_match in relevant_entities else t.field.date_issue\n\n    return t.hook_response()\n\n\ndef flip_day_month(date_value):\n    if is_empty(date_value):\n        return date_value\n\n    day, month = date_value.day, date_value.month\n    raw_text = date_value.ocr_raw_text or date_value.rir_raw_text\n\n    try:\n        raw_month, raw_day, raw_year = map(int, raw_text.split('/'))\n    except ValueError:\n        # Handle case where raw text isn't in the expected format\n        return date_value\n\n    # Check if the date might be misinterpreted (e.g., 5/1/2024 as January 5th instead of May 1st)\n    if day == raw_day and month == raw_month:\n        # No flip needed if day/month match the expected positions\n        return date_value\n\n    # Check if flipping makes logical sense (both day and month must be 12 or below)\n    if day <= 12 and month <= 12:\n        return datetime(date_value.year, day=month, month=day)\n    else:\n        return date_value\n"})}),"\n",(0,o.jsx)(t.h2,{id:"copy-fields-conditionally",children:"Copy fields conditionally"}),"\n",(0,o.jsxs)(t.p,{children:["Copies either ",(0,o.jsx)(t.code,{children:"order_id_manual"})," or ",(0,o.jsx)(t.code,{children:"order_id"})," into ",(0,o.jsx)(t.code,{children:"order_id_normalized"})," depending on whether the manual field is filled or not:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:"from txscript import TxScript, is_set\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    if is_set(t.field.order_id_manual):\n        t.field.order_id_normalized = t.field.order_id_manual\n    else:\n        t.field.order_id_normalized = t.field.order_id\n\n    return t.hook_response()\n"})}),"\n",(0,o.jsxs)(t.p,{children:["(Note that this is just for illustrative purposes - for this particular usecase, always prefer making ",(0,o.jsx)(t.code,{children:"order_id_normalized"})," a formula field.)"]}),"\n",(0,o.jsx)(t.h2,{id:"get-annotation-information",children:"Get annotation information"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'from txscript import TxScript\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    # Annotation ID:\n    t.field.annotation_id = payload.get("annotation").get("id")\n\n    # Document page count:\n    t.field.page_count = len(payload.get("annotation").get("pages"))\n\n    return t.hook_response()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"get-document-information",children:"Get document information"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'from txscript import TxScript\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    # Arrival date:\n    t.field.document_arrived_at = payload.get("document").get("arrived_at")\n\n    # Original file name:\n    t.field.document_original_file_name = payload.get("document").get("original_file_name")\n\n    return t.hook_response()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"validate-header-fields",children:"Validate header fields"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'from txscript import TxScript, is_empty\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    # Header total = subtotal + taxes:\n    if is_set(t.field.amount_due) and is_set(t.field.amount_total_base) and is_set(t.field.amount_total_tax):\n        amount_total_base = default_to(t.field.amount_total_base, 0)\n        amount_total_tax = default_to(t.field.amount_total_tax, 0)\n        amount_due = default_to(t.field.amount_due, 0)\n        if amount_due != (amount_total_base + amount_total_tax):\n            message = "Total invoice amount is not equal to the sum of amount base and the tax."\n            t.show_error(message, t.field.amount_due)\n\n    return t.hook_response()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"validate-line-items",children:"Validate line items"}),"\n",(0,o.jsx)(t.p,{children:"In serverless functions, it is necessary to iterate the individual line items and perform the validations on row level:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-py",children:'from txscript import TxScript, is_empty\n\ndef rossum_hook_request_handler(payload):\n    t = TxScript.from_payload(payload)\n\n    for row in t.field.line_items:\n        if is_empty(row.item_code):\n            t.show_error("Item code is required on line items.", row.item_code)\n\n    return t.hook_response()\n'})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);